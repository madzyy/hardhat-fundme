{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.19;\n\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror FundMe__NotOwner();\n\n\n/**\n * @title A contract for crowd funding\n * @author Tapiwa Madzanise\n * @notice Just for learnig purpose\n * @dev implements ETH price feeds as prices on main and test net and MockV3Aggregator.sol for local network\n */\ncontract FundMe{\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // state variables\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n\n    // events and modifiers\n    modifier onlyOwner{\n        // require(msg.sender == i_owner, \"sender is not the owner\");\n        \n        // _;\n\n        if(msg.sender != i_owner){\n            revert FundMe__NotOwner();\n        }\n\n        _;\n\n        // the _; tells the code to run last since its below\n    }\n\n    // constructor\n    constructor(address priceFeedAddress){ \n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        i_owner = msg.sender;\n        \n    }\n\n    // receive and fallback\n    receive() external payable{\n        fund();\n    }\n\n    fallback() external payable{\n        fund();\n    }\n\n\n    /**\n     * @notice This function funds this contract\n     * @dev This function accepts etherium which must be greater than a certain usd price and checks the price using etherium price feeds or mocks for a local network then adds the funder's address to the funders array and then to the funders mapping to know how much etherium they sent\n     */\n    function fund() public payable{\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n\n    }\n\n    function withdraw() public onlyOwner{\n        \n        for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        //reset the array to 0 objects\n        funders = new address[](0);\n\n        //actually withdrawing\n        // you can use transfer method\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // // you can use the send method which returns a bool if an error occurs\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"sending failed\");}\n\n        //you can use call which returns a boolean and a bytes object for data returned\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\"\");\n        require(success);\n    }\n    \n    \n\n\n    // if someone sends ETH without calling the fund function\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENCED\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter{\r\n      function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        //since we are interacting with another smart contract we need:\r\n        // --> ABI and Address of the contract\r\n\r\n        //change to the correct address of the chainlink price feeds for ETHUSD\r\n        (,int256 price,,,) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        uint256 ethPriceInUsd = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPriceInUsd * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n\r\n        \r\n    }\r\n}"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}