{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa2a9f39a20a2cc253805e193e7270d19580a5e534a1e9ae60ccaee8569e39de9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "785192",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1c461b6512a17862a2ccfe94897ea8c401905523f4557c2289e3612a2826a772",
    "transactionHash": "0xa2a9f39a20a2cc253805e193e7270d19580a5e534a1e9ae60ccaee8569e39de9",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "785192",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ba00ba516f7328fef4aa6f67edfc201",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Tapiwa Madzanise\",\"details\":\"implements ETH price feeds as prices on main and test net and MockV3Aggregator.sol for local network\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This function accepts etherium which must be greater than a certain usd price and checks the price using etherium price feeds or mocks for a local network then adds the funder's address to the funders array and then to the funders mapping to know how much etherium they sent\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"Just for learnig purpose\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Tapiwa Madzanise\\n * @notice Just for learnig purpose\\n * @dev implements ETH price feeds as prices on main and test net and MockV3Aggregator.sol for local network\\n */\\ncontract FundMe{\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // state variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n\\n    // events and modifiers\\n    modifier onlyOwner{\\n        // require(msg.sender == i_owner, \\\"sender is not the owner\\\");\\n        \\n        // _;\\n\\n        if(msg.sender != i_owner){\\n            revert FundMe__NotOwner();\\n        }\\n\\n        _;\\n\\n        // the _; tells the code to run last since its below\\n    }\\n\\n    // constructor\\n    constructor(address priceFeedAddress){ \\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n        \\n    }\\n\\n    // receive and fallback\\n    receive() external payable{\\n        fund();\\n    }\\n\\n    fallback() external payable{\\n        fund();\\n    }\\n\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This function accepts etherium which must be greater than a certain usd price and checks the price using etherium price feeds or mocks for a local network then adds the funder's address to the funders array and then to the funders mapping to know how much etherium they sent\\n     */\\n    function fund() public payable{\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"Didn't send enough\\\");\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n\\n    }\\n\\n    function withdraw() public onlyOwner{\\n        \\n        for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array to 0 objects\\n        funders = new address[](0);\\n\\n        //actually withdrawing\\n        // you can use transfer method\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // // you can use the send method which returns a bool if an error occurs\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"sending failed\\\");}\\n\\n        //you can use call which returns a boolean and a bytes object for data returned\\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n    \\n    \\n\\n\\n    // if someone sends ETH without calling the fund function\\n    \\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x9b254ccf30ac38afbc8f30324d4b3d1276d1066815ec99e4964f5a73b07fd6ee\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENCED\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter{\\r\\n      function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\\r\\n        //since we are interacting with another smart contract we need:\\r\\n        // --> ABI and Address of the contract\\r\\n\\r\\n        //change to the correct address of the chainlink price feeds for ETHUSD\\r\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\\r\\n        uint256 ethPriceInUsd = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPriceInUsd * ethAmount) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n\\r\\n        \\r\\n    }\\r\\n}\",\"keccak256\":\"0xdcb58649e6ed668cf40977f6e58891e7a9926b27e40a44074d4aab8dbd0893da\",\"license\":\"UNLICENCED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e35380380610e3583398181016040528101906100329190610110565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610ccf610166600039600081816102d40152818161046701526105490152610ccf6000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610781565b6104fc565b6040516100d891906107c7565b60405180910390f35b3480156100ed57600080fd5b506100f6610514565b60405161010391906107c7565b60405180910390f35b34801561011857600080fd5b50610121610521565b60405161012e9190610841565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610547565b604051610163919061086b565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108b2565b61056b565b6040516101a0919061086b565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105aa90919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061093c565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b61095c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109ba565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a02565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610677565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104a990610a62565b60006040518083038185875af1925050503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b50509050806104f957600080fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061057b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105b6836105e6565b90506000670de0b6b3a764000085836105cf9190610a77565b6105d99190610ae8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190610ba6565b5050509150506402540be4008161066f9190610c21565b915050919050565b8280548282559060005260206000209081019282156106f0579160200282015b828111156106ef5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610697565b5b5090506106fd9190610701565b5090565b5b8082111561071a576000816000905550600101610702565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061074e82610723565b9050919050565b61075e81610743565b811461076957600080fd5b50565b60008135905061077b81610755565b92915050565b6000602082840312156107975761079661071e565b5b60006107a58482850161076c565b91505092915050565b6000819050919050565b6107c1816107ae565b82525050565b60006020820190506107dc60008301846107b8565b92915050565b6000819050919050565b60006108076108026107fd84610723565b6107e2565b610723565b9050919050565b6000610819826107ec565b9050919050565b600061082b8261080e565b9050919050565b61083b81610820565b82525050565b60006020820190506108566000830184610832565b92915050565b61086581610743565b82525050565b6000602082019050610880600083018461085c565b92915050565b61088f816107ae565b811461089a57600080fd5b50565b6000813590506108ac81610886565b92915050565b6000602082840312156108c8576108c761071e565b5b60006108d68482850161089d565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006109266012836108df565b9150610931826108f0565b602082019050919050565b6000602082019050818103600083015261095581610919565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c5826107ae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109f7576109f661098b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a4c600083610a31565b9150610a5782610a3c565b600082019050919050565b6000610a6d82610a3f565b9150819050919050565b6000610a82826107ae565b9150610a8d836107ae565b9250828202610a9b816107ae565b91508282048414831517610ab257610ab161098b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610af3826107ae565b9150610afe836107ae565b925082610b0e57610b0d610ab9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b3881610b19565b8114610b4357600080fd5b50565b600081519050610b5581610b2f565b92915050565b6000819050919050565b610b6e81610b5b565b8114610b7957600080fd5b50565b600081519050610b8b81610b65565b92915050565b600081519050610ba081610886565b92915050565b600080600080600060a08688031215610bc257610bc161071e565b5b6000610bd088828901610b46565b9550506020610be188828901610b7c565b9450506040610bf288828901610b91565b9350506060610c0388828901610b91565b9250506080610c1488828901610b46565b9150509295509295909350565b6000610c2c82610b5b565b9150610c3783610b5b565b9250828202610c4581610b5b565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c7d57610c7c61098b565b5b8282058414831517610c9257610c9161098b565b5b509291505056fea264697066735822122077b6808aace0838c3e13309514b91b9d44aa26926da1371d7bd6c69d29596f0d64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610781565b6104fc565b6040516100d891906107c7565b60405180910390f35b3480156100ed57600080fd5b506100f6610514565b60405161010391906107c7565b60405180910390f35b34801561011857600080fd5b50610121610521565b60405161012e9190610841565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610547565b604051610163919061086b565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108b2565b61056b565b6040516101a0919061086b565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105aa90919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061093c565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b61095c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109ba565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a02565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610677565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104a990610a62565b60006040518083038185875af1925050503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b50509050806104f957600080fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061057b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105b6836105e6565b90506000670de0b6b3a764000085836105cf9190610a77565b6105d99190610ae8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190610ba6565b5050509150506402540be4008161066f9190610c21565b915050919050565b8280548282559060005260206000209081019282156106f0579160200282015b828111156106ef5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610697565b5b5090506106fd9190610701565b5090565b5b8082111561071a576000816000905550600101610702565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061074e82610723565b9050919050565b61075e81610743565b811461076957600080fd5b50565b60008135905061077b81610755565b92915050565b6000602082840312156107975761079661071e565b5b60006107a58482850161076c565b91505092915050565b6000819050919050565b6107c1816107ae565b82525050565b60006020820190506107dc60008301846107b8565b92915050565b6000819050919050565b60006108076108026107fd84610723565b6107e2565b610723565b9050919050565b6000610819826107ec565b9050919050565b600061082b8261080e565b9050919050565b61083b81610820565b82525050565b60006020820190506108566000830184610832565b92915050565b61086581610743565b82525050565b6000602082019050610880600083018461085c565b92915050565b61088f816107ae565b811461089a57600080fd5b50565b6000813590506108ac81610886565b92915050565b6000602082840312156108c8576108c761071e565b5b60006108d68482850161089d565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006109266012836108df565b9150610931826108f0565b602082019050919050565b6000602082019050818103600083015261095581610919565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c5826107ae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109f7576109f661098b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a4c600083610a31565b9150610a5782610a3c565b600082019050919050565b6000610a6d82610a3f565b9150819050919050565b6000610a82826107ae565b9150610a8d836107ae565b9250828202610a9b816107ae565b91508282048414831517610ab257610ab161098b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610af3826107ae565b9150610afe836107ae565b925082610b0e57610b0d610ab9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b3881610b19565b8114610b4357600080fd5b50565b600081519050610b5581610b2f565b92915050565b6000819050919050565b610b6e81610b5b565b8114610b7957600080fd5b50565b600081519050610b8b81610b65565b92915050565b600081519050610ba081610886565b92915050565b600080600080600060a08688031215610bc257610bc161071e565b5b6000610bd088828901610b46565b9550506020610be188828901610b7c565b9450506040610bf288828901610b91565b9350506060610c0388828901610b91565b9250506080610c1488828901610b46565b9150509295509295909350565b6000610c2c82610b5b565b9150610c3783610b5b565b9250828202610c4581610b5b565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c7d57610c7c61098b565b5b8282058414831517610c9257610c9161098b565b5b509291505056fea264697066735822122077b6808aace0838c3e13309514b91b9d44aa26926da1371d7bd6c69d29596f0d64736f6c63430008130033",
  "devdoc": {
    "author": "Tapiwa Madzanise",
    "details": "implements ETH price feeds as prices on main and test net and MockV3Aggregator.sol for local network",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This function accepts etherium which must be greater than a certain usd price and checks the price using etherium price feeds or mocks for a local network then adds the funder's address to the funders array and then to the funders mapping to know how much etherium they sent"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "Just for learnig purpose",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 335,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}